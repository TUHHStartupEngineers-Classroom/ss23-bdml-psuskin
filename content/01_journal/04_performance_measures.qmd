---
title: "Performance Measures"
author: "Philip Suskin"
---

# Libraries

```{r}
library(tidyverse)
library(h2o)

library(readxl)

library(rsample)
library(recipes)

library(cowplot)
library(glue)
```

# Data and model preparation

```{r}
product_backorders_tbl <- read_csv("../../product_backorders.csv")

set.seed(1)

split_obj <- rsample::initial_split(product_backorders_tbl, prop = 0.75)

train_readable_tb1 <- training(split_obj)
test_readable_tb1  <- testing(split_obj)

factor_names <- c("went_on_backorder")
recipie <- recipe(went_on_backorder ~ ., data = train_readable_tb1) %>%  
           step_zv(all_predictors()) %>% 
           step_mutate_at(factor_names, fn = as.factor) %>%
           step_center(all_numeric()) %>%
           step_scale(all_numeric()) %>%
           step_dummy(all_nominal(), -all_outcomes()) %>% 
           prep()

training <- bake(recipie, new_data = train_readable_tb1)
testing  <- bake(recipie, new_data = test_readable_tb1)

h2o.init()
split_h2o <- h2o.splitFrame(as.h2o(training), ratios = c(0.75), seed = 1)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(testing)

y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)

h2o_model <- h2o.automl(x = x,
                        y = y,
                        training_frame    = train_h2o,
                        validation_frame  = valid_h2o,
                        leaderboard_frame = test_h2o,
                        max_runtime_secs  = 30,
                        nfolds            = 5)
```

## Leaderboard visualization

```{r, fig.height= 12 }
gain_tf_tbl <- h2o_model@leaderboard %>%
                   as_tibble() %>%
                   select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% 
                   mutate(model_type = str_extract(model_id, "[^_]+")) %>%
                   slice(1:n()) %>% 
                   rownames_to_column(var = "rowname") %>%
                   mutate(
                     model_id   = as_factor(model_id),
                     model_type = as.factor(model_type)
                   ) %>% 
                   pivot_longer(cols = -c(model_id, model_type, rowname), 
                                names_to = "key", 
                                values_to = "value", 
                                names_transform = list(key = forcats::fct_inorder)
                   )

# Visualize Data
gain_tf_tbl %>%
  ggplot(aes(value, model_id, color = model_type)) +
  geom_point(size = 3) +
  geom_label(aes(label = round(value, 3), hjust = "inward"), show.legend = F) +
  labs(title = "Leaderboard Metrics",
       subtitle = paste0("Ordered by: ", "AUC"),
       y = "Model Postion, Model ID", x = "") + 
  theme(legend.position = "bottom")
```

## Tune a model with grid search

```{r, fig.height= 12 }
deeplearning_grid <- h2o.grid(algorithm = "deeplearning",
                              grid_id = "deeplearning_grid",
                              # prediction/response
                              x = x,
                              y = y,
                              # training and validation
                              training_frame   = train_h2o,
                              validation_frame = valid_h2o,
                              nfolds = 5,
                              hyper_params = list(
                                hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),
                                epochs = c(10, 25, 50, 75, 100))
                              )

h2o.getGrid(grid_id = "deeplearning_grid", sort_by = "auc", decreasing = TRUE)

best_grid_model <- h2o.getModel(deeplearning_grid@model_ids[[1]])

best_grid_model %>% h2o.auc(train = T, valid = T, xval = T)

best_grid_model %>% h2o.saveModel(path = "h2o_models/",force=TRUE)

h2o.getModel(deeplearning_grid@model_ids[[2]]) %>% h2o.saveModel(path = "h2o_models/",force=TRUE)
h2o.getModel(deeplearning_grid@model_ids[[3]]) %>% h2o.saveModel(path = "h2o_models/",force=TRUE)

```

# Visualize the trade off between the precision and the recall and the optimal threshold

```{r, fig.height= 12 }
performance <- h2o.performance(best_grid_model, newdata = as.h2o(testing))

typeof(performance)
performance %>% slotNames()
performance@metrics
h2o.auc(performance, train = T, valid = T, xval = T)
h2o.auc(h2o_model, train = T, valid = T, xval = T)
h2o.giniCoef(performance)
h2o.logloss(performance)
h2o.confusionMatrix(h2o_model)
h2o.confusionMatrix(performance)

performance_tb1 <- performance %>%
    h2o.metric() %>%
    as.tibble() 

performance_tb1 %>%
    filter(f1 == max(f1))

performance_tb1 %>%
    ggplot(aes(x = threshold)) +
    geom_line(aes(y = precision), size = 1) +
    geom_line(aes(y = recall), size = 1) +
    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance, "f1")) +
    labs(title = "Precision and Recall", y = "Value", x="Threshhold")
```

## ROC Plot

```{r, fig.height= 12 }
h2o.init()
get_models <- function(path, testing) {
    model_h2o <- h2o.loadModel(path)
    performance  <- h2o.performance(model_h2o, newdata = as.h2o(testing)) 
    
    performance %>% h2o.metric() %>%
                    as_tibble() %>%
                    mutate(auc = h2o.auc(performance)) %>%
                    select(tpr, fpr, auc)
}

metrics_tb1 <- fs::dir_info(path = "h2o_models/") %>%
    select(path) %>%
    mutate(metrics = map(path, get_models, testing)) %>%
    unnest(cols = metrics)

metrics_tb1 %>% mutate(path = str_split(path, pattern = "/", simplify = T)[,2] %>% as_factor(),
                      auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%
                      ggplot(aes(fpr, tpr, color = path, linetype = auc)) +
                      geom_line(size = 1) +
                      geom_abline(linetype = "dotted") +
                      theme(
                        legend.direction = "vertical",
                        legend.position = "bottom"
                        ) +
                      labs(
                          title = "ROC Plot",
                          subtitle = "Top Performing Models Metrics"
                      )
```

## Precision vs Recall Plot

```{r, fig.height= 12 }
h2o.init()
get_models <- function(path, testing) {
    model_h2o <- h2o.loadModel(path)
    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(testing)) 
    
    perf_h2o %>% h2o.metric() %>%
                 as_tibble() %>%
                 mutate(auc = h2o.auc(perf_h2o)) %>%
                 select(tpr, fpr, auc, precision, recall)
}

metrics_tb1 <- fs::dir_info(path = "h2o_models/") %>%
               select(path) %>%
               mutate(metrics = map(path, get_models, testing)) %>%
               unnest(cols = metrics)

metrics_tb1 %>% mutate(path = str_split(path, pattern = "/", simplify = T)[,2] %>% as_factor(),
                       auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%
                ggplot(aes(recall, precision, color = path, linetype = auc)) +
                geom_line(size = 1) +
                theme(
                  legend.direction = "vertical",
                  legend.position = "bottom"
                  ) +
                labs(
                    title = "Precision vs Recall Plot",
                    subtitle = "Top Performing Models"
                )
```

## Gain Chart

```{r, fig.height= 12 }
lifted_tb1 <- performance %>%
            h2o.gainsLift() %>%
            as.tibble()
gain_tf_tb1 <- lifted_tb1 %>% 
                   select(group, 
                          cumulative_data_fraction, 
                          cumulative_capture_rate, 
                          cumulative_lift) %>%
                   select(-contains("lift")) %>%
                   mutate(baseline = cumulative_data_fraction) %>%
                   rename(gain     = cumulative_capture_rate) %>%
                   pivot_longer(cols = c(gain, baseline), values_to = "value", names_to = "key")

gain_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
                    geom_line(size = 1.5) +
                    labs(
                        title = "Gain Chart",
                        x = "Data Fraction (Cumulative)",
                        y = "Gain"
                    )
```

## Lift Chart

```{r, fig.height= 12 }
lift_tf_tb1 <- lifted_tb1 %>% 
               select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%
               select(-contains("capture")) %>%
               mutate(baseline = 1) %>%
               rename(lift = cumulative_lift) %>%
               pivot_longer(cols = c(lift, baseline), values_to = "value", names_to = "key")

lift_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
                geom_line(size = 1.5) +
                labs(
                    title = "Lift Chart",
                    x = "Data Fraction (Cumulative)",
                    y = "Lift"
                ) 
```

## Dashboard with cowplot (didn't work)

```{r, fig.height= 12 }
# h2o.init()
# # set values to test the function while building it
# h2o_leaderboard <- h2o_model@leaderboard
# newdata <- testing
# order_by <- "auc"
# max_models <- 4
# size <- 1
# 
# plot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c("auc", "logloss"),
#                                  max_models = 3, size = 1.5) {
#     
#     # Inputs
#     
#     leaderboard_tbl <- h2o_leaderboard %>%
#         as_tibble() %>%
#         slice(1:max_models)
#     
#     newdata_tbl <- newdata %>%
#         as_tibble()
#     
#     # Selecting the first, if nothing is provided
#     order_by      <- tolower(order_by[[1]]) 
#     
#     # Convert string stored in a variable to column name (symbol)
#     order_by_expr <- rlang::sym(order_by)
# 
#     # Turn of the progress bars ( opposite h2o.show_progress())
#     h2o.no_progress()
#     
#     # 1. Model metrics
#     
#     get_model_performance_metrics <- function(model_id, test_tbl) {
#         
#         model_h2o <- h2o.getModel(model_id)
#         perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))
#         
#         perf_h2o %>%
#             h2o.metric() %>%
#             as.tibble() %>%
#             select(threshold, tpr, fpr, precision, recall)
#         
#     }
#     
#     model_metrics_tbl <- leaderboard_tbl %>%
#         mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%
#         unnest(cols = metrics) %>%
#         mutate(
#           model_id = as_factor(model_id) %>% 
#                       # programmatically reorder factors depending on order_by
#                       fct_reorder(!! order_by_expr, 
#                                   .desc = ifelse(order_by == "auc", TRUE, FALSE)),
#           auc      = auc %>% 
#                       round(3) %>% 
#                       as.character() %>% 
#                       as_factor() %>% 
#                       fct_reorder(as.numeric(model_id)),
#           logloss  = logloss %>% 
#                       round(4) %>% 
#                       as.character() %>% 
#                       as_factor() %>% 
#                       fct_reorder(as.numeric(model_id))
#         )
#     
#     
#     # 1A. ROC Plot
#     
#     p1 <- model_metrics_tbl %>%
#         ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +
#         geom_line(size = size) +
#         theme_new +
#         labs(title = "ROC", x = "FPR", y = "TPR") +
#         theme(legend.direction = "vertical") 
#         
#     
#     # 1B. Precision vs Recall
#     
#     p2 <- model_metrics_tbl %>%
#         ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +
#         geom_line(size = size) +
#         theme_new +
#         labs(title = "Precision Vs Recall", x = "Recall", y = "Precision") +
#         theme(legend.position = "none") 
#     
#     
#     # 2. Gain / Lift
#     
#     get_gain_lift <- function(model_id, test_tbl) {
#         
#         model_h2o <- h2o.getModel(model_id)
#         perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) 
#         
#         perf_h2o %>%
#             h2o.gainsLift() %>%
#             as.tibble() %>%
#             select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)
#         
#     }
#     
#     gain_lift_tbl <- leaderboard_tbl %>%
#         mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%
#         unnest(cols = metrics) %>%
#         mutate(
#             model_id = as_factor(model_id) %>% 
#                 fct_reorder(!! order_by_expr, 
#                             .desc = ifelse(order_by == "auc", TRUE, FALSE)),
#             auc  = auc %>% 
#                 round(3) %>% 
#                 as.character() %>% 
#                 as_factor() %>% 
#                 fct_reorder(as.numeric(model_id)),
#             logloss = logloss %>% 
#                 round(4) %>% 
#                 as.character() %>% 
#                 as_factor() %>% 
#                 fct_reorder(as.numeric(model_id))
#         ) %>%
#         rename(
#             gain = cumulative_capture_rate,
#             lift = cumulative_lift
#         ) 
#     
#     # 2A. Gain Plot
#     
#     p3 <- gain_lift_tbl %>%
#         ggplot(aes(cumulative_data_fraction, gain, 
#                           color = model_id, linetype = !! order_by_expr)) +
#         geom_line(size = size,) +
#         geom_segment(x = 0, y = 0, xend = 1, yend = 1, 
#                      color = "red", size = size, linetype = "dotted") +
#         theme_new +
#         expand_limits(x = c(0, 1), y = c(0, 1)) +
#         labs(title = "Gain",
#              x = "Cumulative Data Fraction", y = "Gain") +
#         theme(legend.position = "none")
#     
#     # 2B. Lift Plot
#     
#     p4 <- gain_lift_tbl %>%
#         ggplot(aes(cumulative_data_fraction, lift, 
#                           color = model_id, linetype = !! order_by_expr)) +
#         geom_line(size = size) +
#         geom_segment(x = 0, y = 1, xend = 1, yend = 1, 
#                      color = "red", size = size, linetype = "dotted") +
#         theme_new +
#         expand_limits(x = c(0, 1), y = c(0, 1)) +
#         labs(title = "Lift",
#              x = "Cumulative Data Fraction", y = "Lift") +
#         theme(legend.position = "none") 
#     
#     
#     # Combine using cowplot
#     
#     # cowplot::get_legend extracts a legend from a ggplot object
#     p_legend <- get_legend(p1)
#     # Remove legend from p1
#     p1 <- p1 + theme(legend.position = "none")
#     
#     # cowplot::plt_grid() combines multiple ggplots into a single cowplot object
#     p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)
#     
#     # cowplot::ggdraw() sets up a drawing layer
#     p_title <- ggdraw() + 
#     
#         # cowplot::draw_label() draws text on a ggdraw layer / ggplot object
#         draw_label("H2O Model Metrics", size = 18, fontface = "bold", 
#                    color = "#2C3E50")
#     
#     p_subtitle <- ggdraw() + 
#         draw_label(glue("Ordered by {toupper(order_by)}"), size = 10,  
#                    color = "#2C3E50")
#     
#     # Combine everything
#     ret <- plot_grid(p_title, p_subtitle, p, p_legend, 
#     
#                      # Adjust the relative spacing, so that the legends always fits
#                      ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))
#     
#     h2o.show_progress()
#     
#     return(ret)
#     
# }
# 
# h2o_model@leaderboard %>%
#     plot_h2o_performance(newdata = testing, order_by = "logloss", 
#                          size = 0.5, max_models = 4)
```