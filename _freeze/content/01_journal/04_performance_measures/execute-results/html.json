{
  "hash": "32a01f3b0af72c8d3600963677e5a4a7",
  "result": {
    "markdown": "---\ntitle: \"Performance Measures\"\nauthor: \"Philip Suskin\"\n---\n\n\n# Libraries\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-1_1497c74eaaf89105049b00fa82246dda'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(h2o)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n#> \n#> \n#> Attaching package: 'h2o'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n#> \n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\n\nlibrary(rsample)\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n```\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'cowplot'\n#> \n#> The following object is masked from 'package:lubridate':\n#> \n#>     stamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(glue)\n```\n:::\n\n\n# Data and model preparation\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-2_303b944ebf2fdf34359f66f1fbf6f1f7'}\n\n```{.r .cell-code}\nproduct_backorders_tbl <- read_csv(\"../../product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nset.seed(1)\n\nsplit_obj <- rsample::initial_split(product_backorders_tbl, prop = 0.75)\n\ntrain_readable_tb1 <- training(split_obj)\ntest_readable_tb1  <- testing(split_obj)\n\nfactor_names <- c(\"went_on_backorder\")\nrecipie <- recipe(went_on_backorder ~ ., data = train_readable_tb1) %>%  \n           step_zv(all_predictors()) %>% \n           step_mutate_at(factor_names, fn = as.factor) %>%\n           step_center(all_numeric()) %>%\n           step_scale(all_numeric()) %>%\n           step_dummy(all_nominal(), -all_outcomes()) %>% \n           prep()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n#> ℹ Please use `all_of()` or `any_of()` instead.\n#>   # Was:\n#>   data %>% select(factor_names)\n#> \n#>   # Now:\n#>   data %>% select(all_of(factor_names))\n#> \n#> See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n```{.r .cell-code}\ntraining <- bake(recipie, new_data = train_readable_tb1)\ntesting  <- bake(recipie, new_data = test_readable_tb1)\n\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpcFHaIX\\file59883a1067d7/h2o_psusk_started_from_r.out\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpcFHaIX\\file598859ec29a3/h2o_psusk_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 144 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 15 days \n#>     H2O cluster name:           H2O_started_from_R_psusk_wps853 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.54 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n\n```{.r .cell-code}\nsplit_h2o <- h2o.splitFrame(as.h2o(training), ratios = c(0.75), seed = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(testing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\nh2o_model <- h2o.automl(x = x,\n                        y = y,\n                        training_frame    = train_h2o,\n                        validation_frame  = valid_h2o,\n                        leaderboard_frame = test_h2o,\n                        max_runtime_secs  = 30,\n                        nfolds            = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   4%\n#> 07:17:00.610: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 07:17:00.625: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n## Leaderboard visualization\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-3_5fb7001c051c67bba2f1ecec6fcdf056'}\n\n```{.r .cell-code}\ngain_tf_tbl <- h2o_model@leaderboard %>%\n                   as_tibble() %>%\n                   select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n                   mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n                   slice(1:n()) %>% \n                   rownames_to_column(var = \"rowname\") %>%\n                   mutate(\n                     model_id   = as_factor(model_id),\n                     model_type = as.factor(model_type)\n                   ) %>% \n                   pivot_longer(cols = -c(model_id, model_type, rowname), \n                                names_to = \"key\", \n                                values_to = \"value\", \n                                names_transform = list(key = forcats::fct_inorder)\n                   )\n\n# Visualize Data\ngain_tf_tbl %>%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 3), hjust = \"inward\"), show.legend = F) +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"AUC\"),\n       y = \"Model Postion, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](04_performance_measures_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Tune a model with grid search\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-4_322fc829fc2523790c2a70d3eb41eca5'}\n\n```{.r .cell-code}\ndeeplearning_grid <- h2o.grid(algorithm = \"deeplearning\",\n                              grid_id = \"deeplearning_grid\",\n                              # prediction/response\n                              x = x,\n                              y = y,\n                              # training and validation\n                              training_frame   = train_h2o,\n                              validation_frame = valid_h2o,\n                              nfolds = 5,\n                              hyper_params = list(\n                                hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n                                epochs = c(10, 25, 50, 75, 100))\n                              )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nh2o.getGrid(grid_id = \"deeplearning_grid\", sort_by = \"auc\", decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 15 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>       epochs       hidden                  model_ids     auc\n#> 1   78.01643 [10, 10, 10]  deeplearning_grid_model_4 0.88980\n#> 2  104.00032 [50, 20, 10] deeplearning_grid_model_10 0.87869\n#> 3   77.99793 [20, 20, 20] deeplearning_grid_model_14 0.87048\n#> 4   78.01162 [50, 20, 10]  deeplearning_grid_model_9 0.86551\n#> 5  103.99517 [10, 10, 10]  deeplearning_grid_model_5 0.85969\n#> 6  104.01460 [20, 20, 20] deeplearning_grid_model_15 0.85708\n#> 7   52.00089 [20, 20, 20] deeplearning_grid_model_13 0.85446\n#> 8   51.99906 [50, 20, 10]  deeplearning_grid_model_8 0.85368\n#> 9   52.00229 [10, 10, 10]  deeplearning_grid_model_3 0.84996\n#> 10  25.99587 [50, 20, 10]  deeplearning_grid_model_7 0.83504\n#> 11  26.00055 [20, 20, 20] deeplearning_grid_model_12 0.83207\n#> 12  25.99802 [10, 10, 10]  deeplearning_grid_model_2 0.81657\n#> 13  10.39792 [20, 20, 20] deeplearning_grid_model_11 0.77804\n#> 14  10.39699 [10, 10, 10]  deeplearning_grid_model_1 0.77264\n#> 15  10.39001 [50, 20, 10]  deeplearning_grid_model_6 0.76630\n```\n:::\n\n```{.r .cell-code}\nbest_grid_model <- h2o.getModel(deeplearning_grid@model_ids[[1]])\n\nbest_grid_model %>% h2o.auc(train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>     train     valid      xval \n#> 0.9039726 0.8931867 0.8897960\n```\n:::\n\n```{.r .cell-code}\nbest_grid_model %>% h2o.saveModel(path = \"h2o_models/\",force=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"C:\\\\Users\\\\psusk\\\\Documents\\\\R Repository\\\\ss23-bdml-psuskin\\\\content\\\\01_journal\\\\h2o_models\\\\deeplearning_grid_model_4\"\n```\n:::\n\n```{.r .cell-code}\nh2o.getModel(deeplearning_grid@model_ids[[2]]) %>% h2o.saveModel(path = \"h2o_models/\",force=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"C:\\\\Users\\\\psusk\\\\Documents\\\\R Repository\\\\ss23-bdml-psuskin\\\\content\\\\01_journal\\\\h2o_models\\\\deeplearning_grid_model_10\"\n```\n:::\n\n```{.r .cell-code}\nh2o.getModel(deeplearning_grid@model_ids[[3]]) %>% h2o.saveModel(path = \"h2o_models/\",force=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"C:\\\\Users\\\\psusk\\\\Documents\\\\R Repository\\\\ss23-bdml-psuskin\\\\content\\\\01_journal\\\\h2o_models\\\\deeplearning_grid_model_14\"\n```\n:::\n:::\n\n\n# Visualize the trade off between the precision and the recall and the optimal threshold\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-5_c70c63847055e73a392a701e4b2ed22e'}\n\n```{.r .cell-code}\nperformance <- h2o.performance(best_grid_model, newdata = as.h2o(testing))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntypeof(performance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"S4\"\n```\n:::\n\n```{.r .cell-code}\nperformance %>% slotNames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"algorithm\" \"on_train\"  \"on_valid\"  \"on_xval\"   \"metrics\"\n```\n:::\n\n```{.r .cell-code}\nperformance@metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $model\n#> $model$`__meta`\n#> $model$`__meta`$schema_version\n#> [1] 3\n#> \n#> $model$`__meta`$schema_name\n#> [1] \"ModelKeyV3\"\n#> \n#> $model$`__meta`$schema_type\n#> [1] \"Key<Model>\"\n#> \n#> \n#> $model$name\n#> [1] \"deeplearning_grid_model_4\"\n#> \n#> $model$type\n#> [1] \"Key<Model>\"\n#> \n#> $model$URL\n#> [1] \"/3/Models/deeplearning_grid_model_4\"\n#> \n#> \n#> $model_checksum\n#> [1] \"3996016788900710336\"\n#> \n#> $frame\n#> $frame$name\n#> [1] \"testing_sid_ada7_138\"\n#> \n#> \n#> $frame_checksum\n#> [1] \"-9217328979175615432\"\n#> \n#> $description\n#> NULL\n#> \n#> $scoring_time\n#> [1] 1.686634e+12\n#> \n#> $predictions\n#> NULL\n#> \n#> $MSE\n#> [1] 0.07387311\n#> \n#> $RMSE\n#> [1] 0.2717961\n#> \n#> $nobs\n#> [1] 4764\n#> \n#> $custom_metric_name\n#> NULL\n#> \n#> $custom_metric_value\n#> [1] 0\n#> \n#> $r2\n#> [1] 0.2900341\n#> \n#> $logloss\n#> [1] 0.2571341\n#> \n#> $AUC\n#> [1] 0.8900507\n#> \n#> $pr_auc\n#> [1] 0.5321544\n#> \n#> $Gini\n#> [1] 0.7801013\n#> \n#> $mean_per_class_error\n#> [1] 0.2447445\n#> \n#> $domain\n#> [1] \"No\"  \"Yes\"\n#> \n#> $cm\n#> $cm$`__meta`\n#> $cm$`__meta`$schema_version\n#> [1] 3\n#> \n#> $cm$`__meta`$schema_name\n#> [1] \"ConfusionMatrixV3\"\n#> \n#> $cm$`__meta`$schema_type\n#> [1] \"ConfusionMatrix\"\n#> \n#> \n#> $cm$table\n#> Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#>          No Yes  Error          Rate\n#> No     3977 225 0.0535 = 225 / 4,202\n#> Yes     245 317 0.4359 =   245 / 562\n#> Totals 4222 542 0.0987 = 470 / 4,764\n#> \n#> \n#> $thresholds_and_metric_scores\n#> Metrics for Thresholds: Binomial metrics as a function of classification thresholds\n#>   threshold       f1       f2 f0point5 accuracy precision   recall specificity\n#> 1  0.999768 0.027826 0.017691 0.065147 0.882662  0.615385 0.014235    0.998810\n#> 2  0.996098 0.034662 0.022095 0.080386 0.883081  0.666667 0.017794    0.998810\n#> 3  0.991825 0.044750 0.028672 0.101881 0.883501  0.684211 0.023132    0.998572\n#> 4  0.988260 0.048027 0.030851 0.108359 0.883501  0.666667 0.024911    0.998334\n#> 5  0.979868 0.054514 0.035196 0.120846 0.883501  0.640000 0.028470    0.997858\n#>   absolute_mcc min_per_class_accuracy mean_per_class_accuracy  tns fns fps tps\n#> 1     0.080663               0.014235                0.506522 4197 554   5   8\n#> 2     0.095599               0.017794                0.508302 4197 552   5  10\n#> 3     0.111080               0.023132                0.510852 4196 549   6  13\n#> 4     0.113186               0.024911                0.511623 4195 548   7  14\n#> 5     0.117544               0.028470                0.513164 4193 546   9  16\n#>        tnr      fnr      fpr      tpr idx\n#> 1 0.998810 0.985765 0.001190 0.014235   0\n#> 2 0.998810 0.982206 0.001190 0.017794   1\n#> 3 0.998572 0.976868 0.001428 0.023132   2\n#> 4 0.998334 0.975089 0.001666 0.024911   3\n#> 5 0.997858 0.971530 0.002142 0.028470   4\n#> \n#> ---\n#>     threshold       f1       f2 f0point5 accuracy precision   recall\n#> 395  0.001409 0.235467 0.434816 0.161448 0.235306  0.133476 0.998221\n#> 396  0.001100 0.231436 0.429293 0.158421 0.217884  0.130891 0.998221\n#> 397  0.000794 0.230107 0.427461 0.157425 0.212007  0.130042 0.998221\n#> 398  0.000515 0.224845 0.420344 0.153468 0.186608  0.126662 1.000000\n#> 399  0.000237 0.224396 0.419716 0.153134 0.184509  0.126377 1.000000\n#> 400  0.000069 0.211040 0.400742 0.143236 0.117968  0.117968 1.000000\n#>     specificity absolute_mcc min_per_class_accuracy mean_per_class_accuracy tns\n#> 395    0.133270     0.131592               0.133270                0.565745 560\n#> 396    0.113517     0.119966               0.113517                0.555869 477\n#> 397    0.106854     0.115890               0.106854                0.552537 449\n#> 398    0.077820     0.099282               0.077820                0.538910 327\n#> 399    0.075440     0.097642               0.075440                0.537720 317\n#> 400    0.000000     0.000000               0.000000                0.500000   0\n#>     fns  fps tps      tnr      fnr      fpr      tpr idx\n#> 395   1 3642 561 0.133270 0.001779 0.866730 0.998221 394\n#> 396   1 3725 561 0.113517 0.001779 0.886483 0.998221 395\n#> 397   1 3753 561 0.106854 0.001779 0.893146 0.998221 396\n#> 398   0 3875 562 0.077820 0.000000 0.922180 1.000000 397\n#> 399   0 3885 562 0.075440 0.000000 0.924560 1.000000 398\n#> 400   0 4202 562 0.000000 0.000000 1.000000 1.000000 399\n#> \n#> $max_criteria_and_metric_scores\n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.314773    0.574275 180\n#> 2                       max f2  0.091448    0.649840 296\n#> 3                 max f0point5  0.328123    0.589823 174\n#> 4                 max accuracy  0.342497    0.904072 167\n#> 5                max precision  0.808871    0.743243  32\n#> 6                   max recall  0.000515    1.000000 397\n#> 7              max specificity  0.999768    0.998810   0\n#> 8             max absolute_mcc  0.328123    0.518807 174\n#> 9   max min_per_class_accuracy  0.077010    0.806050 305\n#> 10 max mean_per_class_accuracy  0.047820    0.811065 328\n#> 11                     max tns  0.999768 4197.000000   0\n#> 12                     max fns  0.999768  554.000000   0\n#> 13                     max fps  0.000069 4202.000000 399\n#> 14                     max tps  0.000515  562.000000 397\n#> 15                     max tnr  0.999768    0.998810   0\n#> 16                     max fnr  0.999768    0.985765   0\n#> 17                     max fpr  0.000069    1.000000 399\n#> 18                     max tpr  0.000515    1.000000 397\n#> \n#> $gains_lift_table\n#> Gains/Lift Table: Avg response rate: 11.80 %, avg score:  9.88 %\n#>    group cumulative_data_fraction lower_threshold     lift cumulative_lift\n#> 1      1               0.01007557        0.899768 6.004448        6.004448\n#> 2      2               0.02015113        0.712906 5.827847        5.916148\n#> 3      3               0.03001679        0.615467 4.869690        5.572207\n#> 4      4               0.04009236        0.540049 5.474644        5.547689\n#> 5      5               0.05016793        0.479810 5.651246        5.568487\n#> 6      6               0.10012594        0.343930 4.737073        5.153652\n#> 7      7               0.15008396        0.231429 2.564431        4.291785\n#> 8      8               0.20004198        0.149866 1.709621        3.646921\n#> 9      9               0.29995802        0.055323 1.139747        2.811781\n#> 10    10               0.40008396        0.030837 0.693077        2.281550\n#> 11    11               0.50000000        0.020077 0.284937        1.882562\n#> 12    12               0.59991604        0.013005 0.302745        1.619444\n#> 13    13               0.70004198        0.007403 0.177712        1.413235\n#> 14    14               0.79995802        0.003462 0.053426        1.243393\n#> 15    15               0.89987406        0.000880 0.035617        1.109289\n#> 16    16               1.00000000        0.000000 0.017771        1.000000\n#>    response_rate    score cumulative_response_rate cumulative_score\n#> 1       0.708333 0.968802                 0.708333         0.968802\n#> 2       0.687500 0.815915                 0.697917         0.892359\n#> 3       0.574468 0.663853                 0.657343         0.817255\n#> 4       0.645833 0.575030                 0.654450         0.756382\n#> 5       0.666667 0.505994                 0.656904         0.706095\n#> 6       0.558824 0.407099                 0.607966         0.556910\n#> 7       0.302521 0.286413                 0.506294         0.466871\n#> 8       0.201681 0.186279                 0.430220         0.396796\n#> 9       0.134454 0.095137                 0.331700         0.296314\n#> 10      0.081761 0.040595                 0.269150         0.232317\n#> 11      0.033613 0.025060                 0.222082         0.190900\n#> 12      0.035714 0.016361                 0.191043         0.161831\n#> 13      0.020964 0.009961                 0.166717         0.140109\n#> 14      0.006303 0.005186                 0.146681         0.123257\n#> 15      0.004202 0.002243                 0.130861         0.109820\n#> 16      0.002096 0.000224                 0.117968         0.098847\n#>    capture_rate cumulative_capture_rate       gain cumulative_gain\n#> 1      0.060498                0.060498 500.444840      500.444840\n#> 2      0.058719                0.119217 482.784698      491.614769\n#> 3      0.048043                0.167260 386.969032      457.220715\n#> 4      0.055160                0.222420 447.464413      454.768870\n#> 5      0.056940                0.279359 465.124555      456.848673\n#> 6      0.236655                0.516014 373.707348      415.365160\n#> 7      0.128114                0.644128 156.443075      329.178508\n#> 8      0.085409                0.729537  70.962050      264.692132\n#> 9      0.113879                0.843416  13.974700      181.178138\n#> 10     0.069395                0.912811 -30.692272      128.154956\n#> 11     0.028470                0.941281 -71.506325       88.256228\n#> 12     0.030249                0.971530 -69.725470       61.944370\n#> 13     0.017794                0.989324 -82.228788       41.323502\n#> 14     0.005338                0.994662 -94.657436       24.339265\n#> 15     0.003559                0.998221 -96.438291       10.928928\n#> 16     0.001779                1.000000 -98.222879        0.000000\n#>    kolmogorov_smirnov\n#> 1            0.057166\n#> 2            0.112316\n#> 3            0.155599\n#> 4            0.206713\n#> 5            0.259845\n#> 6            0.471512\n#> 7            0.560120\n#> 8            0.600313\n#> 9            0.616144\n#> 10           0.581303\n#> 11           0.500301\n#> 12           0.421316\n#> 13           0.327972\n#> 14           0.220745\n#> 15           0.111500\n#> 16           0.000000\n```\n:::\n\n```{.r .cell-code}\nh2o.auc(performance, train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.8900507\n```\n:::\n\n```{.r .cell-code}\nh2o.auc(h2o_model, train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in h2o.auc(h2o_model, train = T, valid = T, xval = T): No AUC for\n#> H2OAutoML\n```\n:::\n\n```{.r .cell-code}\nh2o.giniCoef(performance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.7801013\n```\n:::\n\n```{.r .cell-code}\nh2o.logloss(performance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.2571341\n```\n:::\n\n```{.r .cell-code}\nh2o.confusionMatrix(h2o_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> NULL\n```\n:::\n\n```{.r .cell-code}\nh2o.confusionMatrix(performance)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"No\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Yes\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Error\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Rate\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"3977\",\"2\":\"225\",\"3\":\"0.05354593\",\"4\":\"=225/4202\",\"_rn_\":\"No\"},{\"1\":\"245\",\"2\":\"317\",\"3\":\"0.43594306\",\"4\":\"=245/562\",\"_rn_\":\"Yes\"},{\"1\":\"4222\",\"2\":\"542\",\"3\":\"0.09865659\",\"4\":\"=470/4764\",\"_rn_\":\"Totals\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nperformance_tb1 <- performance %>%\n    h2o.metric() %>%\n    as.tibble() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\nperformance_tb1 %>%\n    filter(f1 == max(f1))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"threshold\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f2\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f0point5\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"accuracy\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precision\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"recall\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"specificity\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"absolute_mcc\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"min_per_class_accuracy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_per_class_accuracy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tns\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fns\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fps\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tps\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tnr\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fnr\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fpr\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tpr\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"idx\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.3147728\",\"2\":\"0.5742754\",\"3\":\"0.5681004\",\"4\":\"0.5805861\",\"5\":\"0.9013434\",\"6\":\"0.5848708\",\"7\":\"0.5640569\",\"8\":\"0.9464541\",\"9\":\"0.518612\",\"10\":\"0.5640569\",\"11\":\"0.7552555\",\"12\":\"3977\",\"13\":\"245\",\"14\":\"225\",\"15\":\"317\",\"16\":\"0.9464541\",\"17\":\"0.4359431\",\"18\":\"0.05354593\",\"19\":\"0.5640569\",\"20\":\"180\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nperformance_tb1 %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), size = 1) +\n    geom_line(aes(y = recall), size = 1) +\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance, \"f1\")) +\n    labs(title = \"Precision and Recall\", y = \"Value\", x=\"Threshhold\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](04_performance_measures_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## ROC Plot\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-6_ba0ef129d3082a118ffdd42b152194c0'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpqoIe2j\\filee1c136b79cc/h2o_psusk_started_from_r.out\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpqoIe2j\\filee1c6eef5b24/h2o_psusk_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 342 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 15 days \n#>     H2O cluster name:           H2O_started_from_R_psusk_zon102 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.53 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n\n```{.r .cell-code}\nget_models <- function(path, testing) {\n    model_h2o <- h2o.loadModel(path)\n    performance  <- h2o.performance(model_h2o, newdata = as.h2o(testing)) \n    \n    performance %>% h2o.metric() %>%\n                    as_tibble() %>%\n                    mutate(auc = h2o.auc(performance)) %>%\n                    select(tpr, fpr, auc)\n}\n\nmetrics_tb1 <- fs::dir_info(path = \"h2o_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, get_models, testing)) %>%\n    unnest(cols = metrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nmetrics_tb1 %>% mutate(path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n                      auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n                      ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n                      geom_line(size = 1) +\n                      geom_abline(linetype = \"dotted\") +\n                      theme(\n                        legend.direction = \"vertical\",\n                        legend.position = \"bottom\"\n                        ) +\n                      labs(\n                          title = \"ROC Plot\",\n                          subtitle = \"Top Performing Models Metrics\"\n                      )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](04_performance_measures_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Precision vs Recall Plot\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-7_3f55b48e29a591c0de47b9b6f70d2617'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpSoO86m\\file19b025b11794/h2o_psusk_started_from_r.out\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpSoO86m\\file19b03e6c7e4f/h2o_psusk_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 193 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 15 days \n#>     H2O cluster name:           H2O_started_from_R_psusk_nvo404 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.54 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n```\n:::\n\n```{.r .cell-code}\nget_models <- function(path, testing) {\n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(testing)) \n    \n    perf_h2o %>% h2o.metric() %>%\n                 as_tibble() %>%\n                 mutate(auc = h2o.auc(perf_h2o)) %>%\n                 select(tpr, fpr, auc, precision, recall)\n}\n\nmetrics_tb1 <- fs::dir_info(path = \"h2o_models/\") %>%\n               select(path) %>%\n               mutate(metrics = map(path, get_models, testing)) %>%\n               unnest(cols = metrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nmetrics_tb1 %>% mutate(path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n                       auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n                ggplot(aes(recall, precision, color = path, linetype = auc)) +\n                geom_line(size = 1) +\n                theme(\n                  legend.direction = \"vertical\",\n                  legend.position = \"bottom\"\n                  ) +\n                labs(\n                    title = \"Precision vs Recall Plot\",\n                    subtitle = \"Top Performing Models\"\n                )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](04_performance_measures_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Gain Chart\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-8_9686550a3f964928dc21fc68e48e9f25'}\n\n```{.r .cell-code}\nlifted_tb1 <- performance %>%\n            h2o.gainsLift() %>%\n            as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\ngain_tf_tb1 <- lifted_tb1 %>% \n                   select(group, \n                          cumulative_data_fraction, \n                          cumulative_capture_rate, \n                          cumulative_lift) %>%\n                   select(-contains(\"lift\")) %>%\n                   mutate(baseline = cumulative_data_fraction) %>%\n                   rename(gain     = cumulative_capture_rate) %>%\n                   pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n                    geom_line(size = 1.5) +\n                    labs(\n                        title = \"Gain Chart\",\n                        x = \"Data Fraction (Cumulative)\",\n                        y = \"Gain\"\n                    )\n```\n\n::: {.cell-output-display}\n![](04_performance_measures_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Lift Chart\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-9_bc9acba4da34db3f43ec31c533d273ab'}\n\n```{.r .cell-code}\nlift_tf_tb1 <- lifted_tb1 %>% \n               select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n               select(-contains(\"capture\")) %>%\n               mutate(baseline = 1) %>%\n               rename(lift = cumulative_lift) %>%\n               pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n                geom_line(size = 1.5) +\n                labs(\n                    title = \"Lift Chart\",\n                    x = \"Data Fraction (Cumulative)\",\n                    y = \"Lift\"\n                ) \n```\n\n::: {.cell-output-display}\n![](04_performance_measures_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Dashboard with cowplot\n\n\n::: {.cell hash='04_performance_measures_cache/html/unnamed-chunk-10_ec88afbd16f18eeff14eb7d32a4fd360'}\n\n```{.r .cell-code}\n# h2o.init()\n# # set values to test the function while building it\n# h2o_leaderboard <- h2o_model@leaderboard\n# newdata <- testing\n# order_by <- \"auc\"\n# max_models <- 4\n# size <- 1\n# \n# plot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n#                                  max_models = 3, size = 1.5) {\n#     \n#     # Inputs\n#     \n#     leaderboard_tbl <- h2o_leaderboard %>%\n#         as_tibble() %>%\n#         slice(1:max_models)\n#     \n#     newdata_tbl <- newdata %>%\n#         as_tibble()\n#     \n#     # Selecting the first, if nothing is provided\n#     order_by      <- tolower(order_by[[1]]) \n#     \n#     # Convert string stored in a variable to column name (symbol)\n#     order_by_expr <- rlang::sym(order_by)\n# \n#     # Turn of the progress bars ( opposite h2o.show_progress())\n#     h2o.no_progress()\n#     \n#     # 1. Model metrics\n#     \n#     get_model_performance_metrics <- function(model_id, test_tbl) {\n#         \n#         model_h2o <- h2o.getModel(model_id)\n#         perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n#         \n#         perf_h2o %>%\n#             h2o.metric() %>%\n#             as.tibble() %>%\n#             select(threshold, tpr, fpr, precision, recall)\n#         \n#     }\n#     \n#     model_metrics_tbl <- leaderboard_tbl %>%\n#         mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n#         unnest(cols = metrics) %>%\n#         mutate(\n#           model_id = as_factor(model_id) %>% \n#                       # programmatically reorder factors depending on order_by\n#                       fct_reorder(!! order_by_expr, \n#                                   .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n#           auc      = auc %>% \n#                       round(3) %>% \n#                       as.character() %>% \n#                       as_factor() %>% \n#                       fct_reorder(as.numeric(model_id)),\n#           logloss  = logloss %>% \n#                       round(4) %>% \n#                       as.character() %>% \n#                       as_factor() %>% \n#                       fct_reorder(as.numeric(model_id))\n#         )\n#     \n#     \n#     # 1A. ROC Plot\n#     \n#     p1 <- model_metrics_tbl %>%\n#         ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size) +\n#         theme_new +\n#         labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n#         theme(legend.direction = \"vertical\") \n#         \n#     \n#     # 1B. Precision vs Recall\n#     \n#     p2 <- model_metrics_tbl %>%\n#         ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size) +\n#         theme_new +\n#         labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n#         theme(legend.position = \"none\") \n#     \n#     \n#     # 2. Gain / Lift\n#     \n#     get_gain_lift <- function(model_id, test_tbl) {\n#         \n#         model_h2o <- h2o.getModel(model_id)\n#         perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n#         \n#         perf_h2o %>%\n#             h2o.gainsLift() %>%\n#             as.tibble() %>%\n#             select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n#         \n#     }\n#     \n#     gain_lift_tbl <- leaderboard_tbl %>%\n#         mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n#         unnest(cols = metrics) %>%\n#         mutate(\n#             model_id = as_factor(model_id) %>% \n#                 fct_reorder(!! order_by_expr, \n#                             .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n#             auc  = auc %>% \n#                 round(3) %>% \n#                 as.character() %>% \n#                 as_factor() %>% \n#                 fct_reorder(as.numeric(model_id)),\n#             logloss = logloss %>% \n#                 round(4) %>% \n#                 as.character() %>% \n#                 as_factor() %>% \n#                 fct_reorder(as.numeric(model_id))\n#         ) %>%\n#         rename(\n#             gain = cumulative_capture_rate,\n#             lift = cumulative_lift\n#         ) \n#     \n#     # 2A. Gain Plot\n#     \n#     p3 <- gain_lift_tbl %>%\n#         ggplot(aes(cumulative_data_fraction, gain, \n#                           color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size,) +\n#         geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n#                      color = \"red\", size = size, linetype = \"dotted\") +\n#         theme_new +\n#         expand_limits(x = c(0, 1), y = c(0, 1)) +\n#         labs(title = \"Gain\",\n#              x = \"Cumulative Data Fraction\", y = \"Gain\") +\n#         theme(legend.position = \"none\")\n#     \n#     # 2B. Lift Plot\n#     \n#     p4 <- gain_lift_tbl %>%\n#         ggplot(aes(cumulative_data_fraction, lift, \n#                           color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size) +\n#         geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n#                      color = \"red\", size = size, linetype = \"dotted\") +\n#         theme_new +\n#         expand_limits(x = c(0, 1), y = c(0, 1)) +\n#         labs(title = \"Lift\",\n#              x = \"Cumulative Data Fraction\", y = \"Lift\") +\n#         theme(legend.position = \"none\") \n#     \n#     \n#     # Combine using cowplot\n#     \n#     # cowplot::get_legend extracts a legend from a ggplot object\n#     p_legend <- get_legend(p1)\n#     # Remove legend from p1\n#     p1 <- p1 + theme(legend.position = \"none\")\n#     \n#     # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n#     p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n#     \n#     # cowplot::ggdraw() sets up a drawing layer\n#     p_title <- ggdraw() + \n#     \n#         # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n#         draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n#                    color = \"#2C3E50\")\n#     \n#     p_subtitle <- ggdraw() + \n#         draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n#                    color = \"#2C3E50\")\n#     \n#     # Combine everything\n#     ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n#     \n#                      # Adjust the relative spacing, so that the legends always fits\n#                      ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n#     \n#     h2o.show_progress()\n#     \n#     return(ret)\n#     \n# }\n# \n# h2o_model@leaderboard %>%\n#     plot_h2o_performance(newdata = testing, order_by = \"logloss\", \n#                          size = 0.5, max_models = 4)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}