[
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Business Decisions with Machine Learning/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html",
    "href": "content/01_journal/01_fundamentals.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n  select(symbol, date, adjusted) %>%\n  filter(year(date) >= 2018) %>%\n  group_by(symbol) %>%\n  mutate(lagged = lag(adjusted, order_by = date)) %>%\n  drop_na(lagged) %>%\n  ungroup() %>%\n  mutate(diff = adjusted - lagged) %>%\n  mutate(pct_return = diff / lagged) %>%\n  select(symbol, date, pct_return)"
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_fundamentals.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"../../Business Decisions with Machine Learning/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n  mutate_if(is.integer, ~replace(., is.na(.), 0)) %>%\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0) %>%\n  arrange(symbol) %>%\n  ungroup()"
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_fundamentals.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"../../Business Decisions with Machine Learning/stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nglance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_fundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nkmeans_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = centers %>% map(kmeans_mapper)) %>%\n  mutate(glance  = k_means %>% map(glance)) %>%\n  unnest(glance) \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nkmeans_mapped_tbl %>% \n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(size = 4) +\n  geom_line(linewidth = 1) +\n  theme_tq() +\n  labs(title = \"Scree Plot\")\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/01_fundamentals.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  umap()\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n  as_tibble(.name_repair = \"unique\") %>% # argument is required to set names in the next step\n  set_names(c(\"x\", \"y\")) %>%\n  bind_cols(\n      stock_date_matrix_tbl %>% select(symbol)\n  )\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>%\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5) + \n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_fundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_fundamentals.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"../../Business Decisions with Machine Learning/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- kmeans_mapped_tbl %>%\n  pull(k_means) %>%\n  pluck(10)\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl <- k_means_obj %>% \n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster) %>%\n  left_join(umap_results_tbl, by = 'symbol') %>%\n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = 'symbol')\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %>%\n  ggplot(aes(V1, V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"K-Means and UMAP\")\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/02_regression.html",
    "href": "content/01_journal/02_regression.html",
    "title": "Supervised ML - Regression",
    "section": "",
    "text": "1 Libraries\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#> Loading required package: PerformanceAnalytics\n#> Loading required package: xts\n#> Loading required package: zoo\n#> \n#> Attaching package: 'zoo'\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> ######################### Warning from 'xts' package ##########################\n#> #                                                                             #\n#> # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#> # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#> # source() into this session won't work correctly.                            #\n#> #                                                                             #\n#> # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#> # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#> # dplyr from breaking base R's lag() function.                                #\n#> #                                                                             #\n#> # Code in packages is not affected. It's protected by R's namespace mechanism #\n#> # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#> #                                                                             #\n#> ###############################################################################\n#> \n#> Attaching package: 'xts'\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attaching package: 'PerformanceAnalytics'\n#> \n#> The following object is masked from 'package:graphics':\n#> \n#>     legend\n#> \n#> Loading required package: quantmod\n#> Loading required package: TTR\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(workflows)\nlibrary(rsample)\nlibrary(parsnip)\n\n\n\n2 Data preparation\n\nbike_orderlines_tbl <- read_rds(\"../../Business Decisions with Machine Learning/bike_orderlines.rds\")\n\nsales_tbl <- bike_orderlines_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\nsales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>%\n           fct_reorder(total_sales, .fun = max) %>%\n           fct_rev()) %>%\n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  theme_tq() +\n  labs(\n      title = \"Total Sales for Each Model\",\n      x = \"Frame Material\", y = \"Revenue\"\n  )\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\n\n\n\n3 Recipe\n\nrecipe_obj <- recipe(price ~ frame_material + category_2 + model, data = bike_orderlines_tbl) %>%\n  step_dummy(all_nominal(), -frame_material, -category_2, -model, one_hot = T) %>%\n  prep()\n\n\n\n4 Training and testing data\n\nbike_orderlines_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nset.seed(1)\n\nsplit_obj <- rsample::initial_split(bike_orderlines_tbl, prop = 0.8, strata = \"category_2\")\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\ntrain_transformed_tbl <- bake(recipe_obj, new_data = train_tbl)\ntest_transformed_tbl <- bake(recipe_obj, new_data = test_tbl) \n\n\n\n5 Model\n\nmodel_reg_lm <- linear_reg(mode = \"regression\") %>% set_engine(\"lm\")\n\n\n\n6 Workflow\n\nworkflow <- workflow(preprocessor = NULL, spec = NULL) %>% \n  workflows::add_recipe(recipe_obj) %>%\n  workflows::add_model(model_reg_lm)\n\nfitted_workflow <- fit(workflow, train_transformed_tbl)\n\nmetrics <- fitted_workflow %>%\n           predict(new_data = test_transformed_tbl) %>%\n           bind_cols(test_transformed_tbl %>% select(price)) %>%\n           yardstick::metrics(truth = price, estimate = .pred) %>% print()\n\n#> # A tibble: 3 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 rmse    standard      56.0  \n#> 2 rsq     standard       0.999\n#> 3 mae     standard       7.40"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html",
    "href": "content/01_journal/03_automated_ml.html",
    "title": "Automated Machine Learning with H2O",
    "section": "",
    "text": "library(tidyverse)\nlibrary(h2o)\n\nlibrary(readxl)\nlibrary(GGally)\n\nlibrary(rsample)\nlibrary(recipes)"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q1-what-can-you-deduce-about-the-interaction-between-monthly-income-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q1-what-can-you-deduce-about-the-interaction-between-monthly-income-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.1 Q1: What can you deduce about the interaction between Monthly Income and Attrition?",
    "text": "4.1 Q1: What can you deduce about the interaction between Monthly Income and Attrition?\n\nThose that are leaving have a lower Monthly Income"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q2-what-can-you-deduce-about-the-interaction-between-percent-salary-hike-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q2-what-can-you-deduce-about-the-interaction-between-percent-salary-hike-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.2 Q2: What can you deduce about the interaction between Percent Salary Hike and Attrition?",
    "text": "4.2 Q2: What can you deduce about the interaction between Percent Salary Hike and Attrition?\n\nIt’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q3-what-can-you-deduce-about-the-interaction-between-stock-option-level-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q3-what-can-you-deduce-about-the-interaction-between-stock-option-level-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.3 Q3: What can you deduce about the interaction between Stock Option Level and Attrition?",
    "text": "4.3 Q3: What can you deduce about the interaction between Stock Option Level and Attrition?\n\nThose that are staying have a higher stock option level"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q4-what-can-you-deduce-about-the-interaction-between-environment-satisfaction-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q4-what-can-you-deduce-about-the-interaction-between-environment-satisfaction-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.4 Q4: What can you deduce about the interaction between Environment Satisfaction and Attrition?",
    "text": "4.4 Q4: What can you deduce about the interaction between Environment Satisfaction and Attrition?\n\nA higher proportion of those leaving have a low environment satisfaction level"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q5-what-can-you-deduce-about-the-interaction-between-work-life-balance-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q5-what-can-you-deduce-about-the-interaction-between-work-life-balance-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.5 Q5: What can you deduce about the interaction between Work Life Balance and Attrition?",
    "text": "4.5 Q5: What can you deduce about the interaction between Work Life Balance and Attrition?\n\nThose that are staying have a higher density of 2’s and 3’s"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q6-what-can-you-deduce-about-the-interaction-between-job-involvement-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q6-what-can-you-deduce-about-the-interaction-between-job-involvement-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.6 Q6: What Can you deduce about the interaction between Job Involvement and Attrition?",
    "text": "4.6 Q6: What Can you deduce about the interaction between Job Involvement and Attrition?\n\nThose that are leaving have a lower density of 3’s and 4’s"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q7-what-can-you-deduce-about-the-interaction-between-over-time-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q7-what-can-you-deduce-about-the-interaction-between-over-time-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.7 Q7: What can you deduce about the interaction between Over Time and Attrition?",
    "text": "4.7 Q7: What can you deduce about the interaction between Over Time and Attrition?\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q8-what-can-you-deduce-about-the-interaction-between-training-times-last-year-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q8-what-can-you-deduce-about-the-interaction-between-training-times-last-year-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.8 Q8: What can you deduce about the interaction between Training Times Last Year and Attrition?",
    "text": "4.8 Q8: What can you deduce about the interaction between Training Times Last Year and Attrition?\n\nPeople that leave tend to have less annual trainings"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q9-what-can-you-deduce-about-the-interaction-between-years-at-company-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q9-what-can-you-deduce-about-the-interaction-between-years-at-company-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.9 Q9: What can you deduce about the interaction between Years At Company and Attrition?",
    "text": "4.9 Q9: What can you deduce about the interaction between Years At Company and Attrition?\n\nPeople that leave tend to have less working years at the company"
  },
  {
    "objectID": "content/01_journal/03_automated_ml.html#q10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "href": "content/01_journal/03_automated_ml.html#q10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "title": "Automated Machine Learning with H2O",
    "section": "4.10 Q10: What can you deduce about the interaction between Years Since Last Promotion and Attrition?",
    "text": "4.10 Q10: What can you deduce about the interaction between Years Since Last Promotion and Attrition?\n\nThose that are leaving have more years since last promotion than those that are staying"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html",
    "href": "content/01_journal/04_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "library(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(h2o)\n\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n#> \n#> \n#> Attaching package: 'h2o'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n#> \n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n#> \n#> The following objects are masked from 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n\nlibrary(readxl)\n\nlibrary(rsample)\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(cowplot)\n\n#> \n#> Attaching package: 'cowplot'\n#> \n#> The following object is masked from 'package:lubridate':\n#> \n#>     stamp\n\nlibrary(glue)"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#leaderboard-visualization",
    "href": "content/01_journal/04_performance_measures.html#leaderboard-visualization",
    "title": "Performance Measures",
    "section": "2.1 Leaderboard visualization",
    "text": "2.1 Leaderboard visualization\n\ngain_tf_tbl <- h2o_model@leaderboard %>%\n                   as_tibble() %>%\n                   select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n                   mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n                   slice(1:n()) %>% \n                   rownames_to_column(var = \"rowname\") %>%\n                   mutate(\n                     model_id   = as_factor(model_id),\n                     model_type = as.factor(model_type)\n                   ) %>% \n                   pivot_longer(cols = -c(model_id, model_type, rowname), \n                                names_to = \"key\", \n                                values_to = \"value\", \n                                names_transform = list(key = forcats::fct_inorder)\n                   )\n\n# Visualize Data\ngain_tf_tbl %>%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 3), hjust = \"inward\"), show.legend = F) +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"AUC\"),\n       y = \"Model Postion, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#tune-a-model-with-grid-search",
    "href": "content/01_journal/04_performance_measures.html#tune-a-model-with-grid-search",
    "title": "Performance Measures",
    "section": "2.2 Tune a model with grid search",
    "text": "2.2 Tune a model with grid search\n\ndeeplearning_grid <- h2o.grid(algorithm = \"deeplearning\",\n                              grid_id = \"deeplearning_grid\",\n                              # prediction/response\n                              x = x,\n                              y = y,\n                              # training and validation\n                              training_frame   = train_h2o,\n                              validation_frame = valid_h2o,\n                              nfolds = 5,\n                              hyper_params = list(\n                                hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n                                epochs = c(10, 25, 50, 75, 100))\n                              )\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nh2o.getGrid(grid_id = \"deeplearning_grid\", sort_by = \"auc\", decreasing = TRUE)\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 15 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>       epochs       hidden                  model_ids     auc\n#> 1   78.01643 [10, 10, 10]  deeplearning_grid_model_4 0.88980\n#> 2  104.00032 [50, 20, 10] deeplearning_grid_model_10 0.87869\n#> 3   77.99793 [20, 20, 20] deeplearning_grid_model_14 0.87048\n#> 4   78.01162 [50, 20, 10]  deeplearning_grid_model_9 0.86551\n#> 5  103.99517 [10, 10, 10]  deeplearning_grid_model_5 0.85969\n#> 6  104.01460 [20, 20, 20] deeplearning_grid_model_15 0.85708\n#> 7   52.00089 [20, 20, 20] deeplearning_grid_model_13 0.85446\n#> 8   51.99906 [50, 20, 10]  deeplearning_grid_model_8 0.85368\n#> 9   52.00229 [10, 10, 10]  deeplearning_grid_model_3 0.84996\n#> 10  25.99587 [50, 20, 10]  deeplearning_grid_model_7 0.83504\n#> 11  26.00055 [20, 20, 20] deeplearning_grid_model_12 0.83207\n#> 12  25.99802 [10, 10, 10]  deeplearning_grid_model_2 0.81657\n#> 13  10.39792 [20, 20, 20] deeplearning_grid_model_11 0.77804\n#> 14  10.39699 [10, 10, 10]  deeplearning_grid_model_1 0.77264\n#> 15  10.39001 [50, 20, 10]  deeplearning_grid_model_6 0.76630\n\nbest_grid_model <- h2o.getModel(deeplearning_grid@model_ids[[1]])\n\nbest_grid_model %>% h2o.auc(train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.9039726 0.8931867 0.8897960\n\nbest_grid_model %>% h2o.saveModel(path = \"h2o_models/\",force=TRUE)\n\n#> [1] \"C:\\\\Users\\\\psusk\\\\Documents\\\\R Repository\\\\ss23-bdml-psuskin\\\\content\\\\01_journal\\\\h2o_models\\\\deeplearning_grid_model_4\"\n\nh2o.getModel(deeplearning_grid@model_ids[[2]]) %>% h2o.saveModel(path = \"h2o_models/\",force=TRUE)\n\n#> [1] \"C:\\\\Users\\\\psusk\\\\Documents\\\\R Repository\\\\ss23-bdml-psuskin\\\\content\\\\01_journal\\\\h2o_models\\\\deeplearning_grid_model_10\"\n\nh2o.getModel(deeplearning_grid@model_ids[[3]]) %>% h2o.saveModel(path = \"h2o_models/\",force=TRUE)\n\n#> [1] \"C:\\\\Users\\\\psusk\\\\Documents\\\\R Repository\\\\ss23-bdml-psuskin\\\\content\\\\01_journal\\\\h2o_models\\\\deeplearning_grid_model_14\""
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#roc-plot",
    "href": "content/01_journal/04_performance_measures.html#roc-plot",
    "title": "Performance Measures",
    "section": "3.1 ROC Plot",
    "text": "3.1 ROC Plot\n\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpqoIe2j\\filee1c136b79cc/h2o_psusk_started_from_r.out\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpqoIe2j\\filee1c6eef5b24/h2o_psusk_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 342 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 15 days \n#>     H2O cluster name:           H2O_started_from_R_psusk_zon102 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.53 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nget_models <- function(path, testing) {\n    model_h2o <- h2o.loadModel(path)\n    performance  <- h2o.performance(model_h2o, newdata = as.h2o(testing)) \n    \n    performance %>% h2o.metric() %>%\n                    as_tibble() %>%\n                    mutate(auc = h2o.auc(performance)) %>%\n                    select(tpr, fpr, auc)\n}\n\nmetrics_tb1 <- fs::dir_info(path = \"h2o_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, get_models, testing)) %>%\n    unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmetrics_tb1 %>% mutate(path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n                      auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n                      ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n                      geom_line(size = 1) +\n                      geom_abline(linetype = \"dotted\") +\n                      theme(\n                        legend.direction = \"vertical\",\n                        legend.position = \"bottom\"\n                        ) +\n                      labs(\n                          title = \"ROC Plot\",\n                          subtitle = \"Top Performing Models Metrics\"\n                      )\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#precision-vs-recall-plot",
    "href": "content/01_journal/04_performance_measures.html#precision-vs-recall-plot",
    "title": "Performance Measures",
    "section": "3.2 Precision vs Recall Plot",
    "text": "3.2 Precision vs Recall Plot\n\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpSoO86m\\file19b025b11794/h2o_psusk_started_from_r.out\n#>     C:\\Users\\psusk\\AppData\\Local\\Temp\\RtmpSoO86m\\file19b03e6c7e4f/h2o_psusk_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 193 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 15 days \n#>     H2O cluster name:           H2O_started_from_R_psusk_nvo404 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.54 GB \n#>     H2O cluster total cores:    16 \n#>     H2O cluster allowed cores:  16 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nget_models <- function(path, testing) {\n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(testing)) \n    \n    perf_h2o %>% h2o.metric() %>%\n                 as_tibble() %>%\n                 mutate(auc = h2o.auc(perf_h2o)) %>%\n                 select(tpr, fpr, auc, precision, recall)\n}\n\nmetrics_tb1 <- fs::dir_info(path = \"h2o_models/\") %>%\n               select(path) %>%\n               mutate(metrics = map(path, get_models, testing)) %>%\n               unnest(cols = metrics)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmetrics_tb1 %>% mutate(path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n                       auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n                ggplot(aes(recall, precision, color = path, linetype = auc)) +\n                geom_line(size = 1) +\n                theme(\n                  legend.direction = \"vertical\",\n                  legend.position = \"bottom\"\n                  ) +\n                labs(\n                    title = \"Precision vs Recall Plot\",\n                    subtitle = \"Top Performing Models\"\n                )\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#gain-chart",
    "href": "content/01_journal/04_performance_measures.html#gain-chart",
    "title": "Performance Measures",
    "section": "3.3 Gain Chart",
    "text": "3.3 Gain Chart\n\nlifted_tb1 <- performance %>%\n            h2o.gainsLift() %>%\n            as.tibble()\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\ngain_tf_tb1 <- lifted_tb1 %>% \n                   select(group, \n                          cumulative_data_fraction, \n                          cumulative_capture_rate, \n                          cumulative_lift) %>%\n                   select(-contains(\"lift\")) %>%\n                   mutate(baseline = cumulative_data_fraction) %>%\n                   rename(gain     = cumulative_capture_rate) %>%\n                   pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n                    geom_line(size = 1.5) +\n                    labs(\n                        title = \"Gain Chart\",\n                        x = \"Data Fraction (Cumulative)\",\n                        y = \"Gain\"\n                    )"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#lift-chart",
    "href": "content/01_journal/04_performance_measures.html#lift-chart",
    "title": "Performance Measures",
    "section": "3.4 Lift Chart",
    "text": "3.4 Lift Chart\n\nlift_tf_tb1 <- lifted_tb1 %>% \n               select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n               select(-contains(\"capture\")) %>%\n               mutate(baseline = 1) %>%\n               rename(lift = cumulative_lift) %>%\n               pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_tf_tb1 %>% ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n                geom_line(size = 1.5) +\n                labs(\n                    title = \"Lift Chart\",\n                    x = \"Data Fraction (Cumulative)\",\n                    y = \"Lift\"\n                )"
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html#dashboard-with-cowplot",
    "href": "content/01_journal/04_performance_measures.html#dashboard-with-cowplot",
    "title": "Performance Measures",
    "section": "3.5 Dashboard with cowplot",
    "text": "3.5 Dashboard with cowplot\n\n# h2o.init()\n# # set values to test the function while building it\n# h2o_leaderboard <- h2o_model@leaderboard\n# newdata <- testing\n# order_by <- \"auc\"\n# max_models <- 4\n# size <- 1\n# \n# plot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n#                                  max_models = 3, size = 1.5) {\n#     \n#     # Inputs\n#     \n#     leaderboard_tbl <- h2o_leaderboard %>%\n#         as_tibble() %>%\n#         slice(1:max_models)\n#     \n#     newdata_tbl <- newdata %>%\n#         as_tibble()\n#     \n#     # Selecting the first, if nothing is provided\n#     order_by      <- tolower(order_by[[1]]) \n#     \n#     # Convert string stored in a variable to column name (symbol)\n#     order_by_expr <- rlang::sym(order_by)\n# \n#     # Turn of the progress bars ( opposite h2o.show_progress())\n#     h2o.no_progress()\n#     \n#     # 1. Model metrics\n#     \n#     get_model_performance_metrics <- function(model_id, test_tbl) {\n#         \n#         model_h2o <- h2o.getModel(model_id)\n#         perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n#         \n#         perf_h2o %>%\n#             h2o.metric() %>%\n#             as.tibble() %>%\n#             select(threshold, tpr, fpr, precision, recall)\n#         \n#     }\n#     \n#     model_metrics_tbl <- leaderboard_tbl %>%\n#         mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n#         unnest(cols = metrics) %>%\n#         mutate(\n#           model_id = as_factor(model_id) %>% \n#                       # programmatically reorder factors depending on order_by\n#                       fct_reorder(!! order_by_expr, \n#                                   .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n#           auc      = auc %>% \n#                       round(3) %>% \n#                       as.character() %>% \n#                       as_factor() %>% \n#                       fct_reorder(as.numeric(model_id)),\n#           logloss  = logloss %>% \n#                       round(4) %>% \n#                       as.character() %>% \n#                       as_factor() %>% \n#                       fct_reorder(as.numeric(model_id))\n#         )\n#     \n#     \n#     # 1A. ROC Plot\n#     \n#     p1 <- model_metrics_tbl %>%\n#         ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size) +\n#         theme_new +\n#         labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n#         theme(legend.direction = \"vertical\") \n#         \n#     \n#     # 1B. Precision vs Recall\n#     \n#     p2 <- model_metrics_tbl %>%\n#         ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size) +\n#         theme_new +\n#         labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n#         theme(legend.position = \"none\") \n#     \n#     \n#     # 2. Gain / Lift\n#     \n#     get_gain_lift <- function(model_id, test_tbl) {\n#         \n#         model_h2o <- h2o.getModel(model_id)\n#         perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n#         \n#         perf_h2o %>%\n#             h2o.gainsLift() %>%\n#             as.tibble() %>%\n#             select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n#         \n#     }\n#     \n#     gain_lift_tbl <- leaderboard_tbl %>%\n#         mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n#         unnest(cols = metrics) %>%\n#         mutate(\n#             model_id = as_factor(model_id) %>% \n#                 fct_reorder(!! order_by_expr, \n#                             .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n#             auc  = auc %>% \n#                 round(3) %>% \n#                 as.character() %>% \n#                 as_factor() %>% \n#                 fct_reorder(as.numeric(model_id)),\n#             logloss = logloss %>% \n#                 round(4) %>% \n#                 as.character() %>% \n#                 as_factor() %>% \n#                 fct_reorder(as.numeric(model_id))\n#         ) %>%\n#         rename(\n#             gain = cumulative_capture_rate,\n#             lift = cumulative_lift\n#         ) \n#     \n#     # 2A. Gain Plot\n#     \n#     p3 <- gain_lift_tbl %>%\n#         ggplot(aes(cumulative_data_fraction, gain, \n#                           color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size,) +\n#         geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n#                      color = \"red\", size = size, linetype = \"dotted\") +\n#         theme_new +\n#         expand_limits(x = c(0, 1), y = c(0, 1)) +\n#         labs(title = \"Gain\",\n#              x = \"Cumulative Data Fraction\", y = \"Gain\") +\n#         theme(legend.position = \"none\")\n#     \n#     # 2B. Lift Plot\n#     \n#     p4 <- gain_lift_tbl %>%\n#         ggplot(aes(cumulative_data_fraction, lift, \n#                           color = model_id, linetype = !! order_by_expr)) +\n#         geom_line(size = size) +\n#         geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n#                      color = \"red\", size = size, linetype = \"dotted\") +\n#         theme_new +\n#         expand_limits(x = c(0, 1), y = c(0, 1)) +\n#         labs(title = \"Lift\",\n#              x = \"Cumulative Data Fraction\", y = \"Lift\") +\n#         theme(legend.position = \"none\") \n#     \n#     \n#     # Combine using cowplot\n#     \n#     # cowplot::get_legend extracts a legend from a ggplot object\n#     p_legend <- get_legend(p1)\n#     # Remove legend from p1\n#     p1 <- p1 + theme(legend.position = \"none\")\n#     \n#     # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n#     p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n#     \n#     # cowplot::ggdraw() sets up a drawing layer\n#     p_title <- ggdraw() + \n#     \n#         # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n#         draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n#                    color = \"#2C3E50\")\n#     \n#     p_subtitle <- ggdraw() + \n#         draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n#                    color = \"#2C3E50\")\n#     \n#     # Combine everything\n#     ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n#     \n#                      # Adjust the relative spacing, so that the legends always fits\n#                      ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n#     \n#     h2o.show_progress()\n#     \n#     return(ret)\n#     \n# }\n# \n# h2o_model@leaderboard %>%\n#     plot_h2o_performance(newdata = testing, order_by = \"logloss\", \n#                          size = 0.5, max_models = 4)"
  },
  {
    "objectID": "content/01_journal/05_black_box.html",
    "href": "content/01_journal/05_black_box.html",
    "title": "Explaining Black-Box Models With LIME",
    "section": "",
    "text": "1 Sadly doesn’t work due to “Error: java.lang.IllegalArgumentException: Test/Validation dataset has no columns in common with the training set”\n\n# # LIME FEATURE EXPLANATION ----\n# \n# # 1. Setup ----\n# \n# # Load Libraries\n# library(h2o)\n# library(recipes)\n# library(readxl)\n# library(tidyverse)\n# library(tidyquant)\n# library(lime)\n# library(rsample)\n# \n# # Load Data\n# employee_attrition_tbl <- read_csv(\"../../HR-Employee-Attrition.csv\")\n# definitions_raw_tbl <- read_excel(\"../../data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n# \n# process_hr_data_readable <- function(data, definitions_tbl) {\n#   \n#   definitions_list <- definitions_tbl %>%\n#     fill(...1, .direction = \"down\") %>%\n#     filter(!is.na(...2)) %>%\n#     separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %>%\n#     rename(column_name = ...1) %>%\n#     mutate(key = as.numeric(key)) %>%\n#     mutate(value = value %>% str_replace(pattern = \"'\", replacement = \"\")) %>%\n#     split(.$column_name) %>%\n#     map(~ select(., -column_name)) %>%\n#     map(~ mutate(., value = as_factor(value))) \n#   \n#   for (i in seq_along(definitions_list)) {\n#     list_name <- names(definitions_list)[i]\n#     colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, \"_value\"))\n#   }\n#   \n#   data_merged_tbl <- list(HR_Data = data) %>%\n#     append(definitions_list, after = 1) %>%\n#     reduce(left_join) %>%\n#     select(-one_of(names(definitions_list))) %>%\n#     set_names(str_replace_all(names(.), pattern = \"_value\", \n#                               replacement = \"\")) %>%\n#     select(sort(names(.))) %>%\n#     mutate_if(is.character, as.factor) %>%\n#     mutate(\n#       BusinessTravel = BusinessTravel %>% fct_relevel(\"Non-Travel\", \n#                                                       \"Travel_Rarely\", \n#                                                       \"Travel_Frequently\"),\n#       MaritalStatus  = MaritalStatus %>% fct_relevel(\"Single\", \n#                                                      \"Married\", \n#                                                      \"Divorced\")\n#     )\n#   \n#   return(data_merged_tbl)\n#   \n# }\n# \n# employee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n# \n# # Split into test and train\n# set.seed(seed = 1113)\n# split_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n# \n# # Assign training and test data\n# train_readable_tbl <- training(split_obj)\n# test_readable_tbl <- testing(split_obj)\n# \n# # ML Preprocessing Recipe \n# recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n#   step_zv(all_predictors()) %>%\n#   step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n#   prep()\n# \n# recipe_obj\n# \n# train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\n# test_tbl <- bake(recipe_obj, new_data = test_readable_tbl)\n# \n# # 2. Models ----\n# \n# h2o.init()\n# \n# automl_leader <- h2o.loadModel(\"h2o_models/deeplearning_grid_model_14\")\n# automl_leader\n# \n# # 3. LIME ----\n# \n# # 3.1 Making Predictions ----\n# \n# predictions_tbl <- automl_leader %>% \n#   h2o.predict(newdata = as.h2o(test_tbl)) %>%\n#   as.tibble() %>%\n#   bind_cols(\n#     test_tbl %>%\n#       select(Attrition, EmployeeNumber)\n#   )\n# \n# predictions_tbl\n# \n# # 3.2 Single Explanation ----\n# \n# explainer <- train_tbl %>%\n#   select(-Attrition) %>%\n#   lime(\n#     model = automl_leader,\n#     bin_continuous = TRUE,\n#     n_bins = 4,\n#     quantile_bins = TRUE\n#   )\n# \n# explainer\n# \n# explanation <- test_tbl %>%\n#   slice(1) %>%\n#   select(-Attrition) %>%\n#   lime::explain(\n#     \n#     # Pass our explainer object\n#     explainer = explainer,\n#     # Because it is a binary classification model: 1\n#     n_labels = 1,\n#     # number of features to be returned\n#     n_features = 8,\n#     # number of localized linear models\n#     n_permutations = 5000,\n#     # Let's start with 1\n#     kernel_width = 1\n#   )\n# \n# explanation\n# \n# explanation %>%\n#   as.tibble() %>%\n#   select(feature:prediction)\n# \n# g <- plot_features(explanation = explanation, ncol = 1)\n# \n# # 3.3 Multiple Explanations ----\n# \n# explanation <- test_tbl %>%\n#   slice(1:20) %>%\n#   select(-Attrition) %>%\n#   lime::explain(\n#     explainer = explainer,\n#     n_labels = 1,\n#     n_features = 8,\n#     n_permutations = 5000,\n#     kernel_width = 0.5\n#   )\n# \n# explanation %>%\n#   as.tibble()\n# \n# plot_features(explanation, ncol = 4)\n# \n# plot_explanations(explanation)\n\n\n\n2 Challenge 1\n\n# library(ggplot2)\n# \n# explanation %>% as.tibble()\n# \n# # Reference\n# explanation %>% filter(case == 1) %>% plot_features()\n# \n# # My version\n# explanation %>%\n#     filter(case == 1) %>%\n#     ggplot(aes(x = fct_reorder(feature,abs(feature_weight)),y = feature_weight,fill = feature_weight < 0)) +\n#     coord_flip() +\n#     geom_col(just = 0.5) + \n#     labs( title = paste0(\n#       \"Case: \",\"1\",\"\\n\",\n#       \"Label: \",filter(explanation,case == 1)[1,]$label,\"\\n\",\n#       \"Probability: \",filter(explanation,case == 1)[1,]$label_prob%>%round(2),\"\\n\",\n#       \"Explanation Fit: \",filter(explanation,case == 1)[1,]$model_r2%>%round(2),\"\\n\"\n#       ),\n#       x = \"Feature\",\n#       y = \"Weight\",\n#       fill = \"\"\n#     ) +\n#     scale_x_discrete(labels=explanation %>% filter(case == 1) %>% arrange(abs(feature_weight)) %>% .$feature_desc) +\n#     theme(legend.position = \"bottom\",\n#           panel.background = element_blank(),\n#           panel.grid.major.x = element_line(color=\"#EBEBEB\"),\n#           panel.grid.minor.x = element_line(color=\"#EBEBEB\")\n#     ) +\n#     scale_fill_manual(values=c(\"#4682B4\", \"#B22222\"),labels=c(\"Supports\",\"Contradics\"))\n\n\n\n3 Challenge 2\n\n# # Reference\n# plot_explanations(explanation)\n# \n# # My version\n# explanation %>%\n#     ggplot(aes(x = case,y = fct_reorder(feature,abs(label_prob)),fill = feature_weight)) +\n#     facet_wrap(~label) + \n#     geom_tile() + \n#     labs(\n#       x = \"Case\",\n#       y = \"Feature\"\n#     ) +\n#     scale_y_discrete(labels=explanation%>% arrange(abs(label_prob)) %>% .$feature_desc) +\n#     theme(panel.background = element_blank(),\n#           panel.grid = element_blank(),\n#           axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)\n#     ) +\n#   scale_fill_gradient2('Feature \\n weight', low = '#B9362F', mid = \"white\", high = '#4B85B6')"
  },
  {
    "objectID": "content/01_journal/06_deep_learning.html",
    "href": "content/01_journal/06_deep_learning.html",
    "title": "Deep Learning",
    "section": "",
    "text": "# Load from specific python version\nSys.setenv(RETICULATE_PYTHON = \"C:/Users/psusk/AppData/Local/Programs/Python/Python39\")\n\nlibrary(tidyverse)\nlibrary(keras)\nlibrary(lime)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(yardstick)\nlibrary(corrr)\n\nchurn_data_raw <- read_csv(\"../../WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n\n#> Rows: 7043 Columns: 21\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (17): customerID, gender, Partner, Dependents, PhoneService, MultipleLin...\n#> dbl  (4): SeniorCitizen, tenure, MonthlyCharges, TotalCharges\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(churn_data_raw)\n\n#> Rows: 7,043\n#> Columns: 21\n#> $ customerID       <chr> \"7590-VHVEG\", \"5575-GNVDE\", \"3668-QPYBK\", \"7795-CFOCW…\n#> $ gender           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n#> $ SeniorCitizen    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ Partner          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#> $ Dependents       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\"…\n#> $ tenure           <dbl> 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2…\n#> $ PhoneService     <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#> $ MultipleLines    <chr> \"No phone service\", \"No\", \"No\", \"No phone service\", \"…\n#> $ InternetService  <chr> \"DSL\", \"DSL\", \"DSL\", \"DSL\", \"Fiber optic\", \"Fiber opt…\n#> $ OnlineSecurity   <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"…\n#> $ OnlineBackup     <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"N…\n#> $ DeviceProtection <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Y…\n#> $ TechSupport      <chr> \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#> $ StreamingTV      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Ye…\n#> $ StreamingMovies  <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes…\n#> $ Contract         <chr> \"Month-to-month\", \"One year\", \"Month-to-month\", \"One …\n#> $ PaperlessBilling <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#> $ PaymentMethod    <chr> \"Electronic check\", \"Mailed check\", \"Mailed check\", \"…\n#> $ MonthlyCharges   <dbl> 29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 29.7…\n#> $ TotalCharges     <dbl> 29.85, 1889.50, 108.15, 1840.75, 151.65, 820.50, 1949…\n#> $ Churn            <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Y…\n\n\n\n\n\nchurn_data_tbl <- churn_data_raw %>%\n  select(-customerID) %>%\n  drop_na(TotalCharges) %>%\n  select(Churn, everything())\n\nhead(churn_data_tbl)"
  },
  {
    "objectID": "content/01_journal/06_deep_learning.html#cut-tenure",
    "href": "content/01_journal/06_deep_learning.html#cut-tenure",
    "title": "Deep Learning",
    "section": "2.1 Cut tenure",
    "text": "2.1 Cut tenure\n\nchurn_data_tbl %>% ggplot(aes(x = tenure)) + \n  geom_histogram(bins = 6, color = \"white\", fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts With Six Bins\",\n    x     = \"tenure (month)\"\n  )\n\n\n\n\n\n\n\ntrain_tbl %>%\n    select(Churn, TotalCharges) %>%\n    mutate(\n        Churn = Churn %>% as.factor() %>% as.numeric(),\n        LogTotalCharges = log(TotalCharges)\n        ) %>%\n    correlate() %>%\n    focus(Churn) %>%\n    fashion()\n\n#> Correlation computed with\n#> • Method: 'pearson'\n#> • Missing treated using: 'pairwise.complete.obs'"
  },
  {
    "objectID": "content/01_journal/06_deep_learning.html#one-hot-encode",
    "href": "content/01_journal/06_deep_learning.html#one-hot-encode",
    "title": "Deep Learning",
    "section": "2.2 One-hot encode",
    "text": "2.2 One-hot encode\n\nchurn_data_tbl %>% \n        pivot_longer(cols      = c(Contract, InternetService, MultipleLines, PaymentMethod), \n                     names_to  = \"feature\", \n                     values_to = \"category\") %>% \n        ggplot(aes(category)) +\n          geom_bar(fill = \"#2DC6D6\") +\n          facet_wrap(~ feature, scales = \"free\") +\n          labs(\n            title = \"Features with multiple categories: Need to be one-hot encoded\"\n          ) +\n          theme(axis.text.x = element_text(angle = 25, \n                                           hjust = 1))"
  },
  {
    "objectID": "content/01_journal/06_deep_learning.html#mean-center-and-scale",
    "href": "content/01_journal/06_deep_learning.html#mean-center-and-scale",
    "title": "Deep Learning",
    "section": "2.3 mean-center and scale",
    "text": "2.3 mean-center and scale\n\nrec_obj <- recipe(Churn ~ ., data = train_tbl) %>%\n    step_rm(Churn) %>% \n    step_discretize(tenure, options = list(cuts = 6)) %>%\n    step_log(TotalCharges) %>%\n    step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n    step_center(all_predictors(), -all_outcomes()) %>%\n    step_scale(all_predictors(), -all_outcomes()) %>%\n    prep(data = train_tbl)"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "Welcome to my journal!"
  }
]